pragma solidity ^0.4.18;

interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }

contract OysterPearl {
    // Public variables of PRL
    string public name = "Oyster Pearl";
    string public symbol = "TPRL";
    uint8 public decimals = 18;
    uint256 public totalSupply;
    uint256 public funds = 0;
    address public owner;
    bool public saleClosed = false;
    bool public ownerLock = false;
    uint256 public claimAmount;
    uint256 public payAmount;
    uint256 public feeAmount;
    uint256 public epoch;
    uint256 public retentionMax;

    // This creates an array with all balances
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    mapping (address => bool) public buried;
    mapping (address => uint256) public claimed;

    // This generates a public event on the blockchain that will notify clients
    event Transfer(address indexed from, address indexed to, uint256 value);

    // This notifies clients about the amount burnt
    event Burn(address indexed from, uint256 value);

    event Bury(address indexed target, uint256 value);

    event Claim(address indexed target, address indexed payout, address indexed fee);

    /**
     * Constructor function
     *
     * Initializes contract
     */
    function OysterPearl() public {
        owner = msg.sender;
        totalSupply = 0;
        totalSupply += 25000000 * 10 ** uint256(decimals); //marketing share (5%)
        totalSupply += 75000000 * 10 ** uint256(decimals); //devfund share (15%)
        totalSupply += 1000000 * 10 ** uint256(decimals);  //allocation to match PREPRL supply
        balanceOf[owner] = totalSupply;

        claimAmount = 5 * 10 ** (uint256(decimals) - 1);
        payAmount = 4 * 10 ** (uint256(decimals) - 1);
        feeAmount = 1 * 10 ** (uint256(decimals) - 1);

        epoch = 60;//seconds in a year 31556952

        //maximum time for a sector to remain stored
        retentionMax = 40 * 10 ** uint256(decimals);
    }

    modifier onlyOwner {
        //owner can lock themselves out to complete decentralization of Oyster network
        require(!ownerLock);
        //lockout will occur eventually, guaranteeing Oyster decentralization
        require(block.number < 8000000);
        //only the contract owner is permitted
        require(msg.sender == owner);
        _;
    }

    modifier onlyOwnerForce {
        //only the contract owner is permitted
        require(msg.sender == owner);
        _;
    }

    /**
     * Transfers the contract owner to a new address
     */
    function transferOwnership(address newOwner) public onlyOwnerForce {
        owner = newOwner;
    }

    /**
     * Withdraw funds from the crowdsale
     */
    function withdrawFunds() public onlyOwnerForce {
        owner.transfer(this.balance);
    }

    /**
     * Permanently lock out the contract owner to decentralize Oyster
     */
    function selfLock() public onlyOwner {
        //the sale must be closed before the owner gets locked out
        require(saleClosed);
        //permanently lock out the contract owner
        ownerLock = true;
    }

    /**
     * Contract owner can alter the storage-peg and broker fees
     */
    function amendClaim(uint8 claimAmountSet, uint8 payAmountSet, uint8 feeAmountSet) public onlyOwner {
        require(claimAmountSet == (payAmountSet + feeAmountSet));

        claimAmount = claimAmountSet * 10 ** (uint256(decimals) - 1);
        payAmount = payAmountSet * 10 ** (uint256(decimals) - 1);
        feeAmount = feeAmountSet * 10 ** (uint256(decimals) - 1);
    }

    /**
     * Contract owner can alter the epoch time
     */
    function amendEpoch(uint256 epochSet) public onlyOwner {
        //set the epoch
        epoch = epochSet;
    }

    /**
     * Contract owner can alter the maximum storage retention
     */
    function amendRetention(uint8 retentionSet) public onlyOwner {
        //set RetentionMax
        retentionMax = retentionSet * 10 ** uint256(decimals);
    }

    /**
     * Contract owner can close the crowdsale
     */
    function closeSale() public onlyOwner {
        //the sale must be currently open
        require(!saleClosed);
        //lock the crowdsale
        saleClosed = true;
    }

    /**
     * Contract owner can open the crowdsale
     */
    function openSale() public onlyOwner {
        //the sale must be currently closed
        require(saleClosed);
        //unlock the crowdsale
        saleClosed = false;
    }

    /**
     * Bury an address
     *
     * When an address is buried; only claimAmount can be withdrawn once per epoch
     *
     */
    function bury() public {
        //the address must be previously unburied
        require(!buried[msg.sender]);
        //an address must have atleast claimAmount to be buried
        require(balanceOf[msg.sender] > claimAmount);
        //prevent addresses with large balances from getting buried
        require(balanceOf[msg.sender] <= retentionMax);
        //set buried state to true
        buried[msg.sender] = true;
        //set the initial claim clock to 1
        claimed[msg.sender] = 1;
        //execute an event reflecting the change
        Bury(msg.sender, balanceOf[msg.sender]);
    }

    /**
     * Claim PRL from a buried address
     *
     * If a prior claim wasn't made during the current epoch
     *
     * @param _payout The address of the recipient
     * @param _fee the amount to send
     */
    function claim(address _payout, address _fee) public {
        //the claimed address must have already been buried
        require(buried[msg.sender]);
        //the payout and fee addresses must be different
        require(_payout != _fee);
        //the claimed address cannot pay itself
        require(msg.sender != _payout);
        //the claimed address cannot pay itself
        require(msg.sender != _fee);
        //it must either be the first time this address is being claimed or atleast epoch in time has passed
        require(claimed[msg.sender] == 1 || (block.timestamp - claimed[msg.sender]) >= epoch);
        //buried address must have atleast claimAmount
        require(balanceOf[msg.sender] >= claimAmount);
        //reset the claim clock to the current time
        claimed[msg.sender] = block.timestamp;
        // Save this for an assertion in the future
        uint256 previousBalances = balanceOf[msg.sender] + balanceOf[_payout] + balanceOf[_fee];
        //remove claimAmount from the buried address
        balanceOf[msg.sender] -= claimAmount;
        //pay the website owner that invoked the webnode that found the PRL seed key
        balanceOf[_payout] += payAmount;
        //pay the broker node that unlocked the PRL
        balanceOf[_fee] += feeAmount;
        //execute events to reflect the changes
        Transfer(msg.sender, _payout, payAmount);
        Transfer(msg.sender, _fee, feeAmount);
        Claim(msg.sender, _payout, _fee);
        //asserts are used to use static analysis to find bugs in your code, they should never fail
        assert(balanceOf[msg.sender] + balanceOf[_payout] + balanceOf[_fee] == previousBalances);
    }

    /**
     * Crowdsale function
     */
    function () payable public {
        //check if crowdsale is still active
        require(!saleClosed);
        //minimum amount is 1 finney
        require(msg.value >= 1 finney);
        //price is 1 ETH = 5000 PRL
        uint256 amount = msg.value * 5000;
        //hard cap limitation
        require(totalSupply + amount <= (500000000 * 10 ** uint256(decimals)));
        //increases the total supply
        totalSupply += amount;
        //adds the amount to buyer's balance
        balanceOf[msg.sender] += amount;
        //track eth amount raised
        funds += msg.value;
        //execute an event reflecting the change
        Transfer(this, msg.sender, amount);
    }

    /**
     * Internal transfer, only can be called by this contract
     */
    function _transfer(address _from, address _to, uint _value) internal {
        //sending addresses cannot be buried
        require(!buried[_from]);
        //if the receiving addresse is buried, it cannot exceed retentionMax
        if (buried[_to]) {
            require(balanceOf[_to] + _value >= retentionMax);
        }
        //prevent transfer to 0x0 address. Use burn() instead
        require(_to != 0x0);
        //check if the sender has enough
        require(balanceOf[_from] >= _value);
        //check for overflows
        require(balanceOf[_to] + _value > balanceOf[_to]);
        //save this for an assertion in the future
        uint256 previousBalances = balanceOf[_from] + balanceOf[_to];
        //subtract from the sender
        balanceOf[_from] -= _value;
        //add the same to the recipient
        balanceOf[_to] += _value;
        Transfer(_from, _to, _value);
        //asserts are used to use static analysis to find bugs in your code, they should never fail
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }

    /**
     * Transfer tokens
     *
     * Send `_value` tokens to `_to` from your account
     *
     * @param _to The address of the recipient
     * @param _value the amount to send
     */
    function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }

    /**
     * Transfer tokens from other address
     *
     * Send `_value` tokens to `_to` in behalf of `_from`
     *
     * @param _from The address of the sender
     * @param _to The address of the recipient
     * @param _value the amount to send
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        //check allowance
        require(_value <= allowance[_from][msg.sender]);
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }

    /**
     * Set allowance for other address
     *
     * Allows `_spender` to spend no more than `_value` tokens in your behalf
     *
     * @param _spender The address authorized to spend
     * @param _value the max amount they can spend
     */
    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        // Buried addresses cannot be approved
        require(!buried[_spender]);
        allowance[msg.sender][_spender] = _value;
        return true;
    }

    /**
     * Set allowance for other address and notify
     *
     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it
     *
     * @param _spender The address authorized to spend
     * @param _value the max amount they can spend
     * @param _extraData some extra information to send to the approved contract
     */
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }

    /**
     * Destroy tokens
     *
     * Remove `_value` tokens from the system irreversibly
     *
     * @param _value the amount of money to burn
     */
    function burn(uint256 _value) public returns (bool success) {
        // Buried addresses cannot be burnt
        require(!buried[msg.sender]);
        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
        balanceOf[msg.sender] -= _value;            // Subtract from the sender
        // Updates totalSupply
        totalSupply -= _value;
        Burn(msg.sender, _value);
        return true;
    }

    /**
     * Destroy tokens from other account
     *
     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.
     *
     * @param _from the address of the sender
     * @param _value the amount of money to burn
     */
    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        //buried addresses cannot be burnt
        require(!buried[_from]);
        // Check if the targeted balance is enough
        require(balanceOf[_from] >= _value);
        // Check allowance
        require(_value <= allowance[_from][msg.sender]);
        // Subtract from the targeted balance
        balanceOf[_from] -= _value;
        // Subtract from the sender's allowance
        allowance[_from][msg.sender] -= _value;
        // Update totalSupply
        totalSupply -= _value;
        Burn(_from, _value);
        return true;
    }
}